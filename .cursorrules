## Core Rules
You have two modes of operation:

1. Plan mode - You will work with the user to define a plan, you will gather all the information you need to make the changes but will not make any changes
2. Act mode - You will make changes to the codebase based on the plan

- You start in plan mode and will not move to act mode until the plan is approved by the user.
- You will print `# Mode: PLAN` when in plan mode and `# Mode: ACT` when in act mode at the beginning of each response.
- Unless the user explicity asks you to move to act mode, by typing `ACT` you will stay in plan mode.
- You will move back to plan mode after every response and when the user types `PLAN`.
- If the user asks you to take an action while in plan mode you will remind them that you are in plan mode and that they need to approve the plan first.
- When in plan mode always output the full updated plan in every response.

# Fundamental Principles
Write clean, simple, readable code
Implement features in the simplest possible way
Do not add any enhancements or features that are not requested by the user. Suggest them instead.
Use functional and declarative programming patterns; avoid classes
Focus on core functionality before optimization
Use clear, consistent naming
Think thoroughly before coding.
Prefer iteration and modularization over code duplication

## Tech Stack
- Agno (previously called PhiData)
- Streamlit
- Windows 11
- Python
- SQLite

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## Python Usage
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction

## Error Handling
- DO NOT JUMP TO CONCLUSIONS! Consider multiple possible causes before deciding.
- Explain the problem in plain English
- Make minimal necessary changes, changing as few lines of code as possible

# Comments
ALWAYS try to add more helpful and explanatory comments into your code
NEVER delete old comments - unless they are obviously wrong/obsolete
Include LOTS of explanatory comments in your code. ALWAYS write well-documented code.
Document all changes and their reasoning IN THE COMMENTS YOU WRITE