# Fundamental Principles
Write clean, simple, readable code
Implement features in the simplest possible way
Do not add any enhancements or features that are not requested by the user. Suggest them instead.
Use functional and declarative programming patterns; avoid classes
Focus on core functionality before optimization
Use clear, consistent naming
Think thoroughly before coding.
Prefer iteration and modularization over code duplication

## Tech Stack
- Agno (previously called PhiData)
- Streamlit
- Windows 11
- Python
- SQLite

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## Python Usage
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction

## Error Handling
- DO NOT JUMP TO CONCLUSIONS! Consider multiple possible causes before deciding.
- Explain the problem in plain English
- Make minimal necessary changes, changing as few lines of code as possible

# Comments
ALWAYS try to add more helpful and explanatory comments into your code
NEVER delete old comments - unless they are obviously wrong/obsolete
Include LOTS of explanatory comments in your code. ALWAYS write well-documented code.
Document all changes and their reasoning IN THE COMMENTS YOU WRITE